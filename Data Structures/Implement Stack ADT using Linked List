#include <stdio.h>
#include <stdlib.h>
struct stack
{
    struct Node *head;
};

struct Node {
    int data;
    struct Node *next;
};

int isEmpty(struct stack *S)
{
    if (S->head == NULL)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int isFull(struct stack *S)
{   
    struct Node *new = (struct Node *) malloc(sizeof(struct Node));
    if (new == NULL)
    {
        return 1;
    }
    else
    {   free(new);
        return 0;
    }
}

struct stack* push(struct stack *S, int val)
{
    if(isFull(S))
    {
        printf("Stack OverFlow");
    }
    else if(S->head->data == NULL)
    {
        S->head->data = val;
    }
    else
    {
        struct Node *new = (struct Node *) malloc(sizeof(struct Node));
        new->next = S->head;
        new->data = val;
        printf("Item pushed %d", (new->data));
        S->head = new;
    }
    return S;
}

struct stack* pop(struct stack *S)
{   struct Node *old = (struct Node *) malloc(sizeof(struct Node));
    if(isEmpty(S))
    {
        printf("Stack UnderFlow");
    }
    else
    {   old = S->head;
        S->head = S->head->next;
        printf("Item pop %d", (old->data));
        free(old);
    }
    return S;
}

void display(struct stack * S){
    struct Node *ptr = (struct Node *) malloc(sizeof(struct Node));
    ptr = S->head;
    while(ptr != NULL){
        printf("%d ", ptr->data);
        ptr = ptr->next;
    }
    printf("\n");
}

int main()
{
    struct stack * S = (struct stack *) malloc(sizeof(struct stack));
    S->head = (struct Node *)malloc(sizeof(struct Node));
    S->head->data = NULL;
    S->head->next = NULL;
    int option, item;

    while (1)
    {
        printf("\n1 -> Push\n 2-> Pop\n 3-> Top\n 4->Is Empty\n 5->Is Full\n 6->Display\n");
        printf("\nSelect an option :\n");
        scanf("%d", &option);
        switch (option)
        {
        case 1:
            printf("\nEnter the Item to be pushed ");
            scanf("%d", &item);
            S = push(S,item);
            break;
        case 2:
            S = pop(S);
            break;
        case 3:
            printf("\nThe Item at top is %d\n", S->head->data);
            break;
        case 4:
            if (isEmpty(S))
            {
                printf("\nThe Stack is empty\n");
            }
            else{
                printf("\nThe Stack is not empty\n");
            }
            break;
        case 5:
            if (isFull(S))
            {
                printf("\nThe Stack is full\n");
            }
            else{
                printf("\nThe Stack is not full\n");
            }
            break;
        case 6:
            display(S);
            break;
        default:
            break;
        }
    }
    printf("Exiting Program");

    return 0;
}
