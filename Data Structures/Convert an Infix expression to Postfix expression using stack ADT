#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
struct stack
{
    int size;
    int top;
    int *arr;
};

int isEmpty(struct stack *S)
{
    if (S->top == -1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int isFull(struct stack *S)
{
    if (S->top == S->size - 1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
void push(struct stack *S, int val)
{
    if(isFull(S))
    {
        printf("Stack OverFlow");
    }
    else
    {
        (S->top)++;
        S->arr[S->top] = val;
    }
}

int pop(struct stack *S)
{
    int val = -1;
    if(isEmpty(S))
    {
        printf("Stack OverFlow");
    }
    else
    {
        val = S->arr[S->top];
        S->top--;
    }
    return val;
}

void display(struct stack *S)
{
    for (int i = 0; i <= S->top; i++)
    {
        printf("%d -> %d",i,S->arr[i]);
    }
    
}

int main()
{
    struct stack * S = (struct stack *) malloc(sizeof(struct stack));
    S->size = 100;
    S->top = -1;
    S->arr = (int *)malloc((S->size) * sizeof(int));
    char expression[] = "21+3*";
    for (int i = 0; expression[i]; i++)
    {
        if (isdigit(expression[i]))
        {
            push(S,(int)expression[i] - 48);
        }
        else
        {
            int val1 = pop(S);
            int val2 = pop(S);
            int result;
            switch (expression[i])
            {
            case '+':
                result = val1 + val2;
                break;
            case '-':
                result = val1 - val2;
                break;
            case '*':
                result = val1 * val2;
                break;
            case '/':
                result = val1 / val2;
                break;
            case '%':
                result = val1 % val2;
                break;
            default:
                break;
            }
            push(S,result);
        }
        
    }
    int answer = pop(S);
    return 0;
}
