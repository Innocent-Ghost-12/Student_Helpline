#include <stdio.h>
#include <stdlib.h>
struct Node
{
    int data;
    struct Node *right;
    struct Node *left;
};

struct Node *createNode(int data)
{
    struct Node *n = (struct Node *)malloc(sizeof(struct Node));
    n->data = data;
    n->left = NULL;
    n->right = NULL;
    return n;
}

struct Node *search(struct Node *root, int val)
{
    while (root != NULL)
    {
        if (val < root->data)
        {
            root = root->left;
        }
        else if (val > root->data)
        {
            root = root->right;
        }
        else
        {
            return root;
        }
    }
}

void insert(struct Node *root, int val)
{
    struct Node *prev = NULL;
    while (root != NULL)
    {
        prev = root;
        if (val == root->data)
        {
            printf("The value - %d cannot be inserted, Already exists in BST", val);
            return;
        }
        else if (val < root->data)
        {
            root = root->left;
        }
        else
        {
            root = root->right;
        }
    }
    struct Node *new = createNode(val);
    if (val < prev->data)
    {
        prev->left = new;
    }
    else
    {
        prev->right = new;
    }
    return;
}

void preOrder(struct Node *root)
{
    if (root != NULL)
    {
        printf("%d\t", root->data);
        preOrder(root->left);
        preOrder(root->right);
    }
    return;
}

void postOrder(struct Node *root)
{
    if (root != NULL)
    {
        preOrder(root->left);
        preOrder(root->right);
        printf("%d\t", root->data);
    }
    return;
}
void inOrder(struct Node *root)
{
    if (root != NULL)
    {
        preOrder(root->left);
        printf("%d\t", root->data);
        preOrder(root->right);
    }
    return;
}

struct Node *inOrderPredecessor(struct Node *root)
{
    root = root->left;
    while (root->right != NULL)
    {
        root = root->right;
    }
    return root;
}

struct Node *delete (struct Node *root, int val)
{
    struct Node *iPre;
    if (root == NULL)
    {
        return NULL;
    }
    else if (root->right == NULL && root->left == NULL && root->data == val)
    {
        free(root);
        return NULL;
    }
    else if (root->right == NULL && root->left == NULL && root->data != val)
    {
        printf("The value doesn't exists");
    }
    else
    {
        if (val < root->data)
        {
            delete (root->left, val);
        }
        else if (val > root->data)
        {
            delete (root->right, val);
        }
        else
        {
            iPre = inOrderPredecessor(root);
            root->data = iPre->data;
            delete (root->left, iPre->data);
        }
    }
}

int main()
{
    int option, val;
    printf("Enter the value for root node");
    scanf("%d", &val);
    struct Node *root = createNode(val);

    while (1)
    {
        printf("\n 1 -> Insert\n 2-> Delete\n 3-> InOrder Traversal\n 4->PreOrder Traversal\n 5->PostOrder Traversal\n 6->Search\n");
        printf("\nSelect an option :\n");
        scanf("%d", &option);
        switch (option)
        {
        case 1:
            printf("Enter the value to be inserted");
            scanf("%d", &val);
            insert(root, val);
            break;
        case 2:
            printf("Enter the value to be deleted");
            scanf("%d", &val);
            root = delete (root, val);
            break;
        case 3:
            printf("The In-Order Traversal is:");
            inOrder(root);
            break;
        case 4:
            printf("The Pre-Order Traversal is:");
            preOrder(root);
            break;
        case 5:
            printf("The Post-Order Traversal is:");
            postOrder(root);
            break;
        case 6:
            printf("Enter the value to be searched");
            scanf("%d", &val);
            if (search(root, val) != NULL)
            {
                printf("Data found in BST");
            }
            else
            {
                printf("Data not found in BST");
            }
            break;

        default:
            break;
        }
    }

    return 0;
}
